apply plugin: 'groovy'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    maven { url 'http://bits.netbeans.org/maven2' }
    maven { url 'https://repo.jenkins-ci.org/releases/' }
    jcenter()
    maven { url 'https://mvnrepository.com/artifact/' }

}

configurations {
    testPlugins {}
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.slf4j:slf4j-api:1.7.29'
    compile 'org.codehaus.groovy:groovy-all:3.0.7'
    // Jenkis Pipeline JUnit
    testCompile group:'com.lesfurets', name:'jenkins-pipeline-unit', version:'1.9'
    testCompile group: 'junit', name: 'junit', version: '4.*'

  compile "org.jenkins-ci.plugins:job-dsl-core:1.77"

  // Jenkins groovy dsl
  testCompile 'org.spockframework:spock-core:2.0-M5-groovy-3.0'
  testCompile 'cglib:cglib-nodep:2.2.2' // used by Spock

  // Jenkins test harness dependencies
  testCompile 'org.jenkins-ci.main:jenkins-test-harness:2.72'
  testCompile "org.jenkins-ci.main:jenkins-war:2.288"
  // testCompile "org.jenkins-ci.main:jenkins-war:*:war-for-test@jar"

  // Job DSL plugin including plugin dependencies
  testCompile "org.jenkins-ci.plugins:job-dsl:1.77"
  testCompile "org.jenkins-ci.plugins:job-dsl:1.77@jar"
  testCompile 'org.jenkins-ci.plugins:structs:1.22@jar'
  testCompile 'org.jenkins-ci.plugins:cloudbees-folder:6.15@jar'

  // plugins to install in test instance
  testPlugins 'org.jenkins-ci.plugins:ghprb:1.33.1'
  testPlugins 'com.coravy.hudson.plugins.github:github:1.33.1'
  testPlugins 'org.jenkins-ci.plugins:cloudbees-folder:6.15'
  testPlugins 'org.jenkins-ci.plugins:credentials:2.3.9'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6'
}

sourceSets {
    jobs {
        groovy {
            srcDirs 'jobs'
            compileClasspath += main.compileClasspath
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

task resolveTestDslPlugins(type: Copy) {
    from configurations.testPlugins
    into new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
    include '*.hpi'
    include '*.jpi'
    def mapping = [:]

    doFirst {
        configurations.testPlugins.resolvedConfiguration.resolvedArtifacts.each {
            mapping[it.file.name] = "${it.name}.${it.extension}"
        }
    }
    rename { mapping[it] }

    doLast {
        List<String> baseNames = source*.name.collect { mapping[it] }.collect { it[0..it.lastIndexOf('.') - 1] }
        new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
    }
}

test {
    dependsOn tasks.resolveTestDslPlugins
    inputs.files sourceSets.jobs.groovy.srcDirs

    // set build directory for Jenkins test harness, JENKINS-26331
    systemProperty 'buildDirectory', project.buildDir.absolutePath
}
// ext {
//   jenkins_jobs =[]
//   jenkins_test_suites =[]
// }
// allprojects {
//   task getJobs {
//     doLast { task ->
//       println "I'm $task.project.name"
//       println "I'm in $task.project.projectDir"
//       def tree = fileTree(dir: 'jobs', include: '**/config.groovy')
//       println "fileTree = ${tree.collect{it}}"
//       def gse = new GroovyScriptEngine(".")
//       def bindings = new Binding()
//       // Initialize global variables
//       bindings.setProperty('flavour', null)
//       bindings.setProperty('gradle_project_dir',task.project.projectDir)
//       tree.forEach{
//         def p = gse.run(it.getPath(),bindings)
//         jenkins_jobs.addAll(p.jobs)
//         jenkins_test_suites.addAll(p.test_suites)
//       }
//       println "jenkins_jobs = ${jenkins_jobs}"
//       println "jenkins_test_suites = ${jenkins_test_suites}"
//       file("${project.rootDir}/.jobs").text = jenkins_jobs.inspect()
//       file("${project.rootDir}/.test_suites").text = jenkins_test_suites.inspect()

//     }
//   }
// }

